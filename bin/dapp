#!/usr/bin/env bash
set -E              # any trap on ERR is inherited by shell functions
set -e              # exit if error occurs
set -u              # treat unset variables and parameters as an error
set -o pipefail     # fail if pipe failed
#set -x              # show every commond
#
DOCKER_PASSTHOUGH=""
set +u
if [[ -n "$3" ]]; then
  # shellcheck disable=SC2124
  DOCKER_PASSTHOUGH="${@:3}"
fi
set -u
#
GH_API_HEADER="Accept: application/vnd.github.v3+json"
GH_AUTH_HEADER=""
if [[ -n ${LP_GITHUB_API_TOKEN+x} ]]; then
  GH_AUTH_HEADER="Authorization: token ${LP_GITHUB_API_TOKEN}"
fi
if [[ -z ${DISPLAY+x} ]]; then
  DISPLAY=":0"
fi
#
# Ubuntu - latest = latest LTS, rolling = Latest release, devel.
DISTRO="$(curl --fail --silent --location --url https://raw.githubusercontent.com/tianon/docker-brew-ubuntu-core/master/rolling)" 
# shellcheck disable=SC2181
if [[ -z "${DISTRO}" || $? != 0 ]]; then
  HAVE_IP=0
else
  HAVE_IP=1
fi
CO="forwardcomputers"
set +u
if [[ "${CIRCLECI}" ]]; then
  ROOT="${CIRCLE_WORKING_DIRECTORY}/"
elif [[ "${GITHUB_ACTIONS}" ]]; then
  ROOT="${GITHUB_WORKSPACE}/"
else
  if [[ ! ${SU_COMMAND} ]]; then
    if ! grep -q 'index.docker.io' "${HOME}"/.docker/config.json > /dev/null 2>&1 ; then
      # shellcheck disable=SC2046
      docker login --username forwardcomputers --password $(lpass show LP_DOCKER_PASSWORD --password) > /dev/null 2>&1
    fi
  fi
  ROOT="/opt/filer/os/dockerfiles/"
fi
set -u
NAME=$( echo "${2-none}" | cut -d '/' -f 1 )
if [[ -h "${ROOT}${NAME}" ]]; then
  NAME=$(readlink --quiet --silent "${ROOT}${NAME}")
fi
IMG="${CO}/${NAME}"
DESKTOP_DOCKERFILE=
HAVE_DOCKERFILE=0
DOCKERFILE_DOCKER_OPT=()
if [[ -d "${ROOT}" ]]; then
  HAVE_DOCKERFILE=1
  if [[ -f "${ROOT}${NAME}"/Dockerfile ]]; then
    DESKTOP_DOCKERFILE=$( < "${ROOT}${NAME}"/Dockerfile )
  fi
fi
if [[ ! -d ~/.local/share/applications ]]; then
  mkdir -p ~/.local/share/applications
fi
#
# shellcheck disable=SC2034
BLACK=$'\033[30m'
# shellcheck disable=SC2034
BLUE=$'\033[34m'
# shellcheck disable=SC2034
GREEN=$'\033[32m'
# shellcheck disable=SC2034
CYAN=$'\033[36m'
# shellcheck disable=SC2034
PURPLE=$'\033[35m'
# shellcheck disable=SC2034
RED=$'\033[31m'
# shellcheck disable=SC2034
WHITE=$'\033[37m'
# shellcheck disable=SC2034
YELLOW=$'\033[1;33m'
# shellcheck disable=SC2034
NC=$'\033[0m'
#
# shellcheck disable=SC2191,SC2207,SC2086
DOCKER_OPT_BASE=(--rm --network=host --hostname=docker_"${NAME}" --shm-size=1gb \
                --env HOME=/home/duser \
                --volume /opt/filer:/opt/filer \
                --volume /tmp/.X11-unix:/tmp/.X11-unix:rw \
                --volume "${HOME}":/home/duser \
                --user $(id -u ${USER}):$(id -g ${USER}) \
                --workdir /home/duser)
# shellcheck disable=SC2191
DOCKER_OPT_LINUX=(--env DISPLAY=unix"${DISPLAY}" \
                --env PULSE_SERVER=unix:/run/user/"${UID}"/pulse/native \
                --device /dev/bus/usb \
                --device /dev/dri \
                --device /dev/snd \
                --volume /etc/machine-id:/etc/machine-id:ro \
                --volume /run/user/"${UID}"/pulse:/run/user/1001/pulse)
set +u
# shellcheck disable=SC2191
DOCKER_OPT_CROS=(--env DISPLAY=unix"${DISPLAY_LOW_DENSITY}" \
                --device /dev/snd \
                --volume /etc/machine-id:/etc/machine-id:ro \
                --volume /run/user/"${UID}"/pulse:/run/user/1001/pulse)
# shellcheck disable=SC2191,SC2206
DOCKER_OPT_DARWIN=(--env DISPLAY=host.docker.internal:0 \
                --env PULSE_SERVER=host.docker.internal)
#
# shellcheck disable=SC2207,SC2191
DOCKER_OPT_DUSER=(--env HOME=/home/duser \
                --volume "${HOME}":/home/duser \
                --user $(id -u "${USER}"):$(id -g "${USER}") \
                --workdir /home/duser)
# shellcheck disable=SC2191
DOCKER_OPT_ROOT=(--env HOME=/root \
                --user root \
                --workdir /root)
if [[ $(uname -s) == Darwin ]]; then
  DOCKER_OPT=("${DOCKER_OPT_BASE[@]}" "${DOCKER_OPT_DARWIN[@]}")
elif [[ ( -f /etc/lsb-release || -f /etc/os-release ) && -z "$SOMMELIER_VERSION" ]]; then
  DOCKER_OPT=("${DOCKER_OPT_BASE[@]}" "${DOCKER_OPT_LINUX[@]}")
else
  DOCKER_OPT=("${DOCKER_OPT_BASE[@]}" "${DOCKER_OPT_CROS[@]}")
fi
set -u
# shellcheck disable=SC2162
IFS=' ' read -a DOCKERFILE_DOCKER_OPT <<< "$(perl -ne 'print $& if /(?<=^#DOCKER_OPT ).*/' <<< "${DESKTOP_DOCKERFILE}" 2> /dev/null || true)"
unset IFS
if [[ "${DOCKERFILE_DOCKER_OPT[0]-}" == "+" ]]; then
  # shellcheck disable=SC2145
  eval "DOCKER_OPT+=(${DOCKERFILE_DOCKER_OPT[@]:1})"
fi
if [[ "${DOCKERFILE_DOCKER_OPT[0]-}" == "=" ]]; then
  # shellcheck disable=SC2145
  eval "DOCKER_OPT=(${DOCKERFILE_DOCKER_OPT[@]:1})"
fi
if [[ "${DOCKERFILE_DOCKER_OPT[0]-}" == "-" ]]; then
  for i in "${DOCKERFILE_DOCKER_OPT[@]:1}"; do
    DOCKER_OPT=("${DOCKER_OPT[@]/$i}")
  done
fi
#
main () {
  TARGET="${1-help}"
  if [[ "${TARGET}" == "help" || ( "${NAME}" == "none" && "${TARGET}" != "info_all" && "${TARGET}" != "rebuild_all" && "${TARGET}" != "rebuild_all_ci" && "${TARGET}" != "upgrade_all" && "${TARGET}" != "upgrade_all_ci" && "${TARGET}" != "desktop_all" && "${TARGET}" != "readme" ) ]]; then
    help
  else
    if ! type "${TARGET}" >/dev/null 2>&1; then
      help
    else
      "${TARGET}"
    fi
  fi
}
#
help () { ## Show this help message
  printf '\n%s\n  %s\n\n%s\n' "Usage:" "${GREEN}dapp ${YELLOW}[target] ${CYAN}directory${NC}" "Targets:"
  grep -E '^[a-zA-Z_-]+.*{.*?## .*$' "${0}" | sort | awk 'BEGIN {FS = "\\(.*?## "}; { printf "  '"${GREEN}"'%-15s'"${YELLOW}"'%s'"${NC}"'\n", $1, $2} '
  printf '\n'
}
#
info () { ## Check if there is a newer application version
  if ! (( "${HAVE_IP}" )); then
    printf '%s\n' "${RED}Unable to connect to internet${NC}"
    exit
  fi
  checkbaseimage
  if [[ ! "${APPNEW}" ]]; then
    APPNEW=null
  fi
  # shellcheck disable=SC2053
  if [[ "${APPNEW}" == ${APPHUB} && ! -f /tmp/MAKE_DISTRO_UPDATED ]]; then
    printf '\r%s\n' "${YELLOW}${NAME}${GREEN} build is on latest version ${YELLOW}${APPNEW}${NC}"
  else
    if [[ ${APPHUB} == 0 ]]; then
      if [[ ${APPNEW} == "null" ]]; then
        APPNEW=""
      fi
      printf '%s\n' "${YELLOW}${NAME}${GREEN} nonexistant in Docker, use ${YELLOW}'dapp upgrade ${NAME}'${GREEN} or ${YELLOW}'dapp build ${NAME}'${GREEN} to generate the latest version ${YELLOW}${APPNEW}${NC}"
    else
      if [[ -f /tmp/MAKE_DISTRO_UPDATED ]]; then
        printf '%s\n' "${YELLOW}${NAME}${GREEN} ${RED}base image ${YELLOW}${DISTRO_IMAGE}${NC} ${GREEN}has been updated"
      else \
        printf '%s\n' "${YELLOW}${NAME}${GREEN} ${RED}build is on older version ${YELLOW}${APPHUB}${NC} ${GREEN}current version ${YELLOW}${APPNEW}${NC}"
      fi
    fi
    touch -f /tmp/MAKE_REBUILD
  fi
  rm -f /tmp/MAKE_DISTRO_UPDATED
}
#
info_all () { ## Check if there is a newer version for all applications
  printf '%s\n' "Info on applications" 
  all_apps
  for NAME in "${APPS[@]}"; do
    IMG="${CO}/${NAME}"
    appversions
    info
  done
}
#
update () {
  upgrade
}
#
upgrade () { ## Upgrade if there is a newer application version
  printf '%s' "${GREEN}Upgrading ${YELLOW}${NAME}${NC} - "
  info
  if [[ -f /tmp/MAKE_REBUILD ]]; then
    build
    push
    printf '%s\n' "${GREEN}Rebuilt ${YELLOW}${NAME}${GREEN} to the latest version ${YELLOW}${APPNEW}${NC}"
    rm -f /tmp/MAKE_REBUILD
    readme
  fi
}
#
upgrade_all () { ## Upgrade all applications
  printf '%s\n' "Upgrading applications"
  all_apps
  set +e
  for NAME in "${APPS[@]}"; do
    IMG="${CO}/${NAME}"
    appversions
    upgrade
  done
  set -e
}
#
upgrade_all_ci () {
  printf '%s\n' "Upgrading applications"
  all_apps
  set +e
  for NAME in "${APPS[@]}"; do
    IMG="${CO}/${NAME}"
    appversions
    upgrade
    #shellcheck disable=SC2046
    docker image rm -f $( docker image ls -q --filter reference="${IMG}" )
  done
  set -e
}
#
rebuild () { ## Rebuild application
  build
  push
  printf '%s\n' "${GREEN}Rebuilt ${YELLOW}${NAME}${GREEN} to the latest version ${YELLOW}${APPNEW}${NC}"
}
#
rebuild_all () { ## Rebuild all applications
  printf '%s\n' "Rebuilding all applications"
  all_apps
  set +e
  for NAME in "${APPS[@]}"; do
    IMG="${CO}/${NAME}"
    appversions
    build
    push
    printf '%s\n' "${GREEN}Built ${YELLOW}${NAME}${GREEN} to the latest version ${YELLOW}${APPNEW}${NC}"
    rm -f /tmp/MAKE_REBUILD
  done
  set -e
  readme
}
#
rebuild_all_ci () {
  printf '%s\n' "Rebuilding all applications"
  all_apps
  set +e
  for NAME in "${APPS[@]}"; do
    IMG="${CO}/${NAME}"
    appversions
    build
    push
    printf '%s\n' "${GREEN}Built ${YELLOW}${NAME}${GREEN} to the latest version ${YELLOW}${APPNEW}${NC}"
    rm -f /tmp/MAKE_REBUILD
    #shellcheck disable=SC2046
    docker image rm -f $( docker image ls -q --filter reference="${IMG}" )
  done
  set -e
}
#
build () { ## Build docker image file
  if ! (( "${HAVE_IP}" )); then
    printf '%s\n' "${RED}Cannot build ${GREEN}${NAME}${RED} unable to connect to internet${NC}"
    exit
  fi
  if ! (( "${HAVE_DOCKERFILE}" )); then
    printf '%s\n' "${RED}Cannot build ${GREEN}${NAME}${RED} missing dockerfile${NC}"
    exit
  fi
  local BUILD_DATE
  BUILD_DATE="$(date +'%-d-%-m-%G %r')"
  PLATFORM="$(perl -nle 'print $& if /(?<=^#PLATFORM ).*/' "${ROOT}${NAME}"/Dockerfile || true)"
  printf '%s\n' "Building ${NAME}"
  # docker image build --rm --force-rm --squash \
  # docker image build --rm --force-rm --compress \
  # docker image build --rm --force-rm \
  # docker image build \
  docker buildx build "${PLATFORM}" --output=type=docker \
    --build-arg NAME="${NAME}" \
    --build-arg CO="${CO}" \
    --build-arg APPNEW="${APPNEW}" \
    --build-arg BUILD_DATE="${BUILD_DATE}" \
    --tag "${IMG}" \
    --tag "${IMG}":"${APPNEW}" \
    "${ROOT}${NAME}"
}
#
push () {  ## Push image to Docker Hub
  printf '%s\n' "Pushing ${NAME}-${APPNEW} to Docker hub"
  docker image push "${IMG}":latest
  docker image push "${IMG}":"${APPNEW}"
  tweet
}
#
run () { ## Run the docker application
  printf '%s\n' "Runing ${NAME}"
  checklocalimage
  if [[ ${APPHUB} > ${APPLOCAL} ]]; then
    printf '%s\n' "Pulling ${IMG}"
    docker image pull "${IMG}":latest
  fi
  xhost + LOCAL: 127.0.0.1 > /dev/null 2>&1 || true
  if [[ $(uname -s) == Darwin ]]; then
    rm -f /tmp/DOCKER_RUN_SCRIPT
    printf '%s\n' \
      "#!/usr/bin/env bash" \
      "pulseaudio --kill || true" \
      "pulseaudio --load=module-native-protocol-tcp --exit-idle-time=-1 --daemon" \
      "PREFFERED_SINK=\$( pacmd list-sinks | awk '/index:/ {print \$1 \$2 \$3} /card:/ {print \$0};' | grep -m1 -B1 'Jabra_SPEAK_510_USB' | grep index | awk '{print \$1}' | cut -d ':' -f2 )" \
      "pacmd set-default-sink \${PREFFERED_SINK}" \
      "docker container run --name ${NAME} ${DOCKER_OPT[*]} ${IMG} ${DOCKER_PASSTHOUGH}" \
      "pulseaudio --kill || true" \
      "rm -f /tmp/DOCKER_RUN_SCRIPT" > /tmp/DOCKER_RUN_SCRIPT
    bash /tmp/DOCKER_RUN_SCRIPT 2>/dev/null &
  else
    docker container run --detach --name "${NAME}" "${DOCKER_OPT[@]}" "${IMG}" ${DOCKER_PASSTHOUGH}
  fi
}
#
shell () { ## Run shell in docker application
  printf '%s\n' "Runing shell in ${NAME}"
  checklocalimage
  xhost + LOCAL: 127.0.0.1 > /dev/null 2>&1 || true
#  if [[ $(uname -s) == Darwin ]]; then
#    pulseaudio --kill || true
#    pulseaudio --load=module-native-protocol-tcp --exit-idle-time=-1 --daemon
#    PREFFERED_SINK=$( pacmd list-sinks | awk '/index:/ {print $1 $2 $3} /card:/ {print $0};' | grep -m1 -B1 'Jabra_SPEAK_510_USB' | grep index | awk '{print $1}' | cut -d ':' -f2 )
#    pacmd set-default-sink "${PREFFERED_SINK}"
#  fi
  docker container run --interactive --tty --name "${NAME}"_shell --entrypoint /bin/sh "${DOCKER_OPT[@]}" "${DOCKER_OPT_DUSER[@]}" "${IMG}"
#  if [[ $(uname -s) == Darwin ]]; then
#    pulseaudio --kill || true
#  fi
}
#
root () { ## Run shell in docker application as root
  printf '%s\n' "Runing shell in ${NAME}"
  checklocalimage
  xhost + LOCAL: 127.0.0.1 > /dev/null 2>&1 || true
#  if [[ $(uname -s) == Darwin ]]; then
#    pulseaudio --kill || true
#    pulseaudio --load=module-native-protocol-tcp --exit-idle-time=-1 --daemon
#    PREFFERED_SINK=$( pacmd list-sinks | awk '/index:/ {print $1 $2 $3} /card:/ {print $0};' | grep -m1 -B1 'Jabra_SPEAK_510_USB' | grep index | awk '{print $1}' | cut -d ':' -f2 )
#    pacmd set-default-sink "${PREFFERED_SINK}"
#  fi
  docker container run --interactive --tty --name "${NAME}"_shell --entrypoint /bin/sh "${DOCKER_OPT[@]}" "${DOCKER_OPT_ROOT[@]}" "${IMG}"
#  if [[ $(uname -s) == Darwin ]]; then
#    pulseaudio --kill || true
#  fi
}
#
desktop () { ## Populate desktop application menu
  if [[ $( perl -nle 'print $& if /(?<=^#DESKTOP).*/' <<< "${DESKTOP_DOCKERFILE}" ) ]]; then
    printf '%s\n' "Populating application menu for ${NAME}"
    # shellcheck disable=SC2086
    DESKTOP_COUNT="$( perl -nle 'print $& if /(?<=^#DESKTOP_COUNT ).*/' < ${DESKTOP_DOCKERFILE} 2> /dev/null || echo '999' )"
    for ((i=1; i<="${DESKTOP_COUNT}"; i++)); do
      if [[ "${DESKTOP_COUNT}" = 999 ]]; then
        i=''
      fi
      # shellcheck disable=SC2086
      DESKTOP_NAME="$(perl -nle 'print $& if /(?<=^#'${i}'DESKTOP_NAME ).*/' <<< ${DESKTOP_DOCKERFILE} 2> /dev/null || true)"
      # shellcheck disable=SC2086
      DESKTOP_COMMENT="$(perl -nle 'print $& if /(?<=^#'${i}'DESKTOP_COMMENT ).*/' <<< ${DESKTOP_DOCKERFILE} 2> /dev/null || true)"
      # shellcheck disable=SC2086
      DESKTOP_CATEGORIES="$(perl -nle 'print $& if /(?<=^#'${i}'DESKTOP_CATEGORIES ).*/' <<< ${DESKTOP_DOCKERFILE} 2> /dev/null || true)"
      # shellcheck disable=SC2086
      DESKTOP_MIMETYPE="$(perl -nle 'print $& if /(?<=^#'${i}'DESKTOP_MIMETYPE ).*/' <<< ${DESKTOP_DOCKERFILE} 2> /dev/null || true)"
      # shellcheck disable=SC2086
      DESKTOP_LOGO="$(perl -nle 'print $& if /(?<=^#'${i}'DESKTOP_LOGO ).*/' <<< ${DESKTOP_DOCKERFILE} 2> /dev/null || true)"
      # shellcheck disable=SC2001,SC2046,SC2086
      DESKTOP_LOGO_NAME="${NAME}_$(basename $( sed 's/?format.*//' <<< ${DESKTOP_LOGO}))"
      # shellcheck disable=SC2086
      DESKTOP_EXEC="$(perl -nle 'print $& if /(?<=^#'${i}'DESKTOP_EXEC ).*/' <<< ${DESKTOP_DOCKERFILE} 2> /dev/null || true)"
      if [[ ! "${DESKTOP_EXEC}" ]]; then
        DESKTOP_EXEC="${NAME}"
      fi
      curl --silent --location --output ~/.local/share/applications/"${DESKTOP_LOGO_NAME}" "${DESKTOP_LOGO}"
      if [[ "${DESKTOP_LOGO}" == *?format=TEXT* ]]; then
        mv ~/.local/share/applications/"${DESKTOP_LOGO_NAME}" /tmp
        base64 --decode /tmp/"${DESKTOP_LOGO_NAME}" > ~/.local/share/applications/"${DESKTOP_LOGO_NAME}"
      fi
      printf '%s\n' \
        "[Desktop Entry]" \
        "Version=1.0" \
        "Type=Application" \
        "Terminal=false" \
        "Encoding=UTF-8" \
        "StartupNotify=true" \
        "Name=${DESKTOP_NAME}" \
        "Comment=${DESKTOP_COMMENT}" \
        "Categories=${DESKTOP_CATEGORIES}" \
        "MimeType=${DESKTOP_MIMETYPE}" \
        "Exec=${HOME}/bin/dapp run ${DESKTOP_EXEC}" \
        "Icon=${HOME}/.local/share/applications/${DESKTOP_LOGO_NAME}" > ~/.local/share/applications/"${NAME}${i}".desktop
      printf '%s\n' "${DESKTOP_MIMETYPE}=${NAME}.desktop;" >> ~/.local/share/applications/mimeapps.list
      if [[ "${i}" == '' || "${i}" == "${DESKTOP_COUNT}" ]]; then
        i=999
      fi
    done
  fi
}
#
desktop_all () { ## Populate all desktop applications
  printf '%s\n' "Populating all desktop applications"
  all_apps
  for NAME in "${APPS[@]}"; do
    DESKTOP_DOCKERFILE=$( < "${ROOT}${NAME}"/Dockerfile )
    desktop
  done
}
#
remove () {  ## Remove app docker and desktop files
  printf '%s\n' "Removing ${NAME}"
  rm --force "${HOME}"/.local/share/applications/"${NAME}"*.*
  # shellcheck disable=SC2046
  docker image rm --force $( docker image ls --quiet "${IMG}" | uniq ) 2> /dev/null
}
#
readme () { ## Create readme file
  printf '%s\n' "Creating readme file"
  all_apps
  printf '%s\n' \
    "# Docker files" \
    "#### Docker files for various Linux applications." \
    "---" \
    "| Repository | Status | GitHub | Docker | Tag | Size | Layers |" \
    "| --- | --- | :---: | :---: | :--- | :---: | :---: |" \
    "| [![](https://img.shields.io/badge/dockerfiles-grey.svg)](https://github.com/forwardcomputers/dockerfiles) | [![](https://img.shields.io/github/workflow/status/forwardcomputers/dockerfiles/build_all?label)](https://github.com/forwardcomputers/dockerfiles/actions) | [![](https://img.shields.io/badge/github--grey.svg?label=&logo=github&logoColor=white)](https://github.com/forwardcomputers/dockerfiles) | [![](https://img.shields.io/badge/docker--E5E5E5.svg?label=&logo=docker)](https://hub.docker.com/r/forwardcomputers) |" > "${ROOT}"README.md
  for APP in "${APPS[@]}"; do
    printf '%s' \
      "| [![](https://img.shields.io/badge/${APP}-grey.svg)](https://hub.docker.com/r/forwardcomputers/${APP}) " \
      "| [![](https://img.shields.io/badge/dynamic/json.svg?query=$.Labels['org.opencontainers.image.created']&label=&url=https://api.microbadger.com/v1/images/forwardcomputers/${APP})](https://hub.docker.com/r/forwardcomputers/${APP}) " \
      "| [![](https://img.shields.io/badge/github--grey.svg?label=&logo=github&logoColor=white)](https://github.com/forwardcomputers/dockerfiles/tree/main/${APP}) " \
      "| [![](https://img.shields.io/badge/docker--E5E5E5.svg?label=&logo=docker)](https://hub.docker.com/r/forwardcomputers/${APP}) " \
      "| [![](https://img.shields.io/docker/v/forwardcomputers/${APP}/latest?color=blue&label=)](https://hub.docker.com/r/forwardcomputers/${APP}) " \
      "| [![](https://img.shields.io/docker/image-size/forwardcomputers/${APP}/latest?label=)](http://microbadger.com/images/forwardcomputers/${APP}) " \
      "| [![](https://img.shields.io/microbadger/layers/forwardcomputers/${APP}.svg?label=)](http://microbadger.com/images/forwardcomputers/${APP}) " \
      "|" >> "${ROOT}"README.md
    printf '\n' >> "${ROOT}"README.md
  done
  printf '\n%s' \
    "- This setup is largely based on Jessie Frazelle work [https://github.com/jfrazelle/dockerfiles](https://github.com/jfrazelle/dockerfiles)  " \
    "- FoxitReader - From the Arch Linux repository @ [https://aur.archlinux.org/packages/foxitreader](https://aur.archlinux.org/packages/foxitreader)  " \
    "- Code-server  " \
    "  - Home Assistant Visual Studio Code add-on @ [https://github.com/hassio-addons/addon-vscode](https://github.com/hassio-addons/addon-vscode)  " \
    "  - LinuxServer @ [https://github.com/linuxserver/docker-code-server](https://github.com/linuxserver/docker-code-server)  ">> "${ROOT}"README.md
  sed -i 's/firefox-esr-grey/firefox%E2%80%93esr-grey/g' "${ROOT}"README.md
}
#
appversions () {
  if (( "${HAVE_IP}" )); then
    DISTRO_IMAGE="$(sed --silent --expression='s/^FROM //g; s/ AS .*//p' "${ROOT}${NAME}"/Dockerfile 2> /dev/null || true)"
    APPLOCAL="$(docker image inspect --format '{{ index .Config.Labels "org.opencontainers.image.version" }}' "${IMG}" 2> /dev/null || true)"
    until APPHUB="$(curl --silent --location --url https://registry.hub.docker.com/v2/repositories/forwardcomputers/"${NAME}"/tags | jq --raw-output '.results|.[1]|.name // 0')"; do
      sleep 1
    done
    if (( "${HAVE_DOCKERFILE}" )); then
      APPNEW="$(perl -nle 'print $& if /(?<=^#APPNEW ).*/' "${ROOT}${NAME}"/Dockerfile 2> /dev/null || true)"
    else
      printf '%s\n' "${RED}Cannot build ${GREEN}${NAME}${RED} missing dockerfile${NC}"
      exit
    fi
    if ! [[ "${APPNEW}" =~ ^[+-]?[0-9]+\.?[0-9]*$ ]]; then
      if [[ "${APPNEW}" == "apk" ]]; then
        APPNEW=$(curl -sL https://git.alpinelinux.org/aports/plain/main/"${NAME}"/APKBUILD | awk -F= '/pkgver=/ {print $2}')
        if [[ -z "${APPNEW}" ]]; then
          APPNEW=$(curl -sL https://git.alpinelinux.org/aports/plain/community/"${NAME}"/APKBUILD | awk -F= '/pkgver=/ {print $2}')
          if [[ -z "${APPNEW}" ]]; then
            APPNEW=$(curl -sL https://git.alpinelinux.org/aports/plain/testing/"${NAME}"/APKBUILD | awk -F= '/^pkgver=/ {print $2}')
          fi
        fi
      elif [[ "${APPNEW}" == "apt" ]]; then
        until APTNEWPAGE=$(curl --fail --silent --location --url https://packages.ubuntu.com/"${DISTRO}"/"${NAME}"); do
          sleep 1
        done
        APPNEW="$(echo "${APTNEWPAGE}" | perl -nle 'print $1 if /Package: '"${NAME}"' \((\K[^\)]+)/' | cut -f 1 -d '-' | cut -f 1 -d '+' | cut -f 1 -d '~' | cut -f 2 -d ':')"
      else
        set +e
        eval APPNEW=\$\("$(perl -nle 'print $& if /(?<=^#APPNEW ).*/' "${ROOT}${NAME}"/Dockerfile 2> /dev/null || true)"\)
        set -e
      fi
    fi
  fi
}
#
checkbaseimage () {
  rm -f /tmp/MAKE_DISTRO_LOG /tmp/MAKE_DISTRO_UPDATED /tmp/MAKE_REBUILD
  docker image pull "${IMG}":latest > /dev/null 2>&1 || true
  if [[ "${DISTRO_IMAGE}" ]]; then
    docker image pull "${DISTRO_IMAGE}" > /tmp/MAKE_DISTRO_LOG
  fi
  # shellcheck disable=SC2143
  if [[ -f /tmp/MAKE_DISTRO_LOG && -n "$(grep 'Pull complete' /tmp/MAKE_DISTRO_LOG)" ]]; then
    touch -f /tmp/MAKE_DISTRO_UPDATED
  fi
  rm -f /tmp/MAKE_DISTRO_LOG
}
#
checklocalimage () {
  if ! docker image inspect "${IMG}" > /dev/null 2>&1; then
    printf '%s\n' "Pulling ${IMG}"
    # shellcheck disable=SC2015
    docker image pull "${IMG}":latest > /dev/null 2>&1 || { [[ -d "${ROOT}" ]] && build || { printf '%s\n' "${RED}Cannot build ${GREEN}${NAME}${RED} unable to connect to file share${NC}"; exit; } }
    APPLOCAL="$(docker image inspect --format '{{ index .Config.Labels "org.opencontainers.image.version" }}' "${IMG}" 2> /dev/null || true)"
  fi
}
#
tweet () {
  printf '%s\n' "Tweet ${NAME} push"
  # Code bits from - https://github.com/moebiuscurve/tweetExperiments/tree/master/curlTweets
  message="Pushed ${NAME}-${APPNEW}"
  message_string=$(echo -n "${message}"|sed -e s'/ /%2520/g')
  message_curl=$(echo -n "${message}"|sed -e s'/ /+/g')
  timestamp=$(date +%s)
  nonce=$(date +%s%T | openssl base64 | sed -e s'/[+=/]//g')
  api_version=1.1
  signature_base_string="POST&https%3A%2F%2Fapi.twitter.com%2F${api_version}%2Fstatuses%2Fupdate.json&oauth_consumer_key%3D${LP_T_CONSUMER_KEY}%26oauth_nonce%3D${nonce}%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D${timestamp}%26oauth_token%3D${LP_T_OAUTH_TOKEN}%26oauth_version%3D1.0%26status%3D${message_string}"
  signature_key="${LP_T_CONSUMER_SECRET}&${LP_T_OAUTH_SECRET}"
  oauth_signature=$(echo -n "${signature_base_string}" | openssl dgst -sha1 -hmac "${signature_key}" -binary | openssl base64 | sed -e s'/+/%2B/g' -e s'/\//%2F/g' -e s'/=/%3D/g')
  header="Authorization: OAuth oauth_consumer_key=\"${LP_T_CONSUMER_KEY}\", oauth_nonce=\"${nonce}\", oauth_signature=\"${oauth_signature}\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"${timestamp}\", oauth_token=\"${LP_T_OAUTH_TOKEN}\", oauth_version=\"1.0\""
  # shellcheck disable=SC2034
  result=$(curl -s -X POST "https://api.twitter.com/${api_version}/statuses/update.json" --data "status=${message_curl}" --header "Content-Type: application/x-www-form-urlencoded" --header "${header}")
}
#
all_apps () {
  # shellcheck disable=SC2207
  APPS=( $( \
    curl --silent --location --header "${GH_AUTH_HEADER}" --header "${GH_API_HEADER}" --url https://api.github.com/repos/forwardcomputers/dockerfiles/contents | \
    jq -r 'sort_by( .name )[] | select( .type == "dir" and ( .name | startswith( "." ) | not ) ) | .name' ) \
  )
}
#
appversions
main "$@"
